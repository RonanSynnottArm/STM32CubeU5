# Example workflow using Arm Virtual Hardware (AVH) target
# See https://avh.arm.com for more info
# 
# You will need an Arm Virtual Hardware login to run successfully
# To generate API_TOKEN, go to Profile > API > Generate in AVH browser window.
# Recommended to specify as API_TOKEN secret
#
# Example Project in Projects/B-U585I-IOT02A/Demonstrations/IOT_HTTP_WebServer/
# Built offline
#
# See also scripts/avh directory

name: Rebuild and run STM32U5 Webserver

on:
    push:
    # pull_request:
    workflow_dispatch:

concurrency:
    group: ${{ github.ref }}-${{ github.workflow }}-${{ (github.event_name == 'pull_request' && github.event.number) || (github.event_name == 'workflow_dispatch' && github.run_number) || github.sha }}
    cancel-in-progress: true
    
# Copyright (c) 2022 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Run Matter Linux examples on Arm Virtual Hardware
# Requires build-linux-arm-avh.yml workflow to have been run

# Example workflow using Arm Virtual Hardware (AVH) targets for testing
# See https://avh.arm.com for more info
# 
# Raspberry Pi 4, or i.MX8M+ selected by MODEL environment variable
# 
# You will need an Arm Virtual Hardware login to run successfully
# To generate API_TOKEN, go to Profile > API > Generate in AVH browser window.
# Recommended to specify as API_TOKEN secret
#
# See also scripts/avh directory

on:
    push:
    # pull_request:
    workflow_dispatch:

concurrency:
    group: ${{ github.ref }}-${{ github.workflow }}-${{ (github.event_name == 'pull_request' && github.event.number) || (github.event_name == 'workflow_dispatch' && github.run_number) || github.sha }}
    cancel-in-progress: true
    

jobs:
    avh-test:
        runs-on: ubuntu-latest
        env:
          MODEL: stm32u5-b-u585i-iot02a
          INSTANCE1: CICD_DEMO
          ENDPOINT: https://app.avh.arm.com/api   
          API_TOKEN: ${{ secrets.API_TOKEN }}   
        steps:
          - name: clone repo
            uses: actions/checkout@v2
                                    
          - name: Get OpenVPN websockets and other dependencies
            run: |
                sudo apt-get -y update
                sudo apt -y install openvpn sshpass curl jq
                pip install websockets asyncio

          - name: pull avhcli utility
            run: |
              echo need to update repo link when available
              # git clone https://github.com/ARM-software/avhcli.git
              git clone https://github.com/RonanSynnottArm/avhcli.git

          - name: Create [${{ env.INSTANCE1 }}] on AVH
            run: |
              avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE1 -m $MODEL create
              avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE1 -m $MODEL start

          - name: connect to AVH OpenVPN
            run: |
              sudo openvpn --config avhcli/avh.ovpn --daemon 
              echo Connecting and ping-ing instances...
              while ! ping -c 1 $(cat "./avhcli/${{ env.INSTANCE1 }}_lan_ip.txt"); do
                echo .
                sleep 1
              done
              echo Connected

          # - name: scp binaries to ${{ env.INSTANCE1 }}
            # run: |
              # sshpass -p raspberry scp -o StrictHostKeyChecking=no ${{ env.INSTANCE1 }} pi@$(cat "./avhcli/${{ env.INSTANCE1 }}_lan_ip.txt"):~/
              # sshpass -p raspberry ssh -o StrictHostKeyChecking=no pi@$(cat "./avhcli/${{ env.INSTANCE1 }}_lan_ip.txt") chmod 755 ${{ env.INSTANCE1 }}
              
          # - name: chmod 755 python scripts
            # run: |
              # chmod 755 scripts/avh/ws.py
              # chmod 755 scripts/avh/web_socket_light_test.py
              # chmod 755 scripts/avh/web_socket_chip_tool_test.py
              # chmod 755 avhcli/ws.py

          # - name: Start webserver on ${{ env.INSTANCE1 }} via WebSocket to console
            # run: |
              # ./scripts/avh/web_socket_chip_tool_test.py $(cat "./avhcli/${{ env.INSTANCE1 }}_console.txt")

          - name: Stopping/Deleting ${{ env.INSTANCE1 }}
            run: | 
              sudo killall openvpn
              # avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE1 -m $MODEL delete
              avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE1 -m $MODEL stop

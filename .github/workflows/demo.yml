# a619484ea9c28e5418df.a2ab5797ab613681ee129c07f1f8b9510979575d632e966b377dbcb457e33fd08790ab1d3bca5d14e35e0b9b3e58e6e542ef9f3e7365391f7964bfb39a19c433

# Example workflow using Arm Virtual Hardware (AVH) target
# See https://avh.arm.com for more info
# 
# You will need an Arm Virtual Hardware login to run successfully
# To generate API_TOKEN, go to Profile > API > Generate in AVH browser window.
# Recommended to specify as API_TOKEN secret
#
# Example Project in Projects/B-U585I-IOT02A/Demonstrations/IOT_HTTP_WebServer/
# Built offline
#
# See also scripts/avh directory

name: Run STM32U5 Webserver

on:
    push:
    # pull_request:
    workflow_dispatch:

concurrency:
    group: ${{ github.ref }}-${{ github.workflow }}-${{ (github.event_name == 'pull_request' && github.event.number) || (github.event_name == 'workflow_dispatch' && github.run_number) || github.sha }}
    cancel-in-progress: true

jobs:
    rebuild:
        runs-on: ubuntu-latest
        steps:
          - name: rebuild example
            run: |
              echo to do
              # cd Projects/B-U585I-IOT02A/Demonstrations/IOT_HTTP_WebServer/MDK-ARM
              # cbuild.sh STM32CubeU5_Demo_U585I-IOT02A.STM32CubeU5_Demo_U585I-IOT02A.cprj

        
    avh-test:
        runs-on: ubuntu-latest
        needs: rebuild
        env:
          ENDPOINT: https://app.avh.arm.com/api
          API_ENDPOINT: https://app.avh.arm.com/api
          API_TOKEN: ${{ secrets.API_TOKEN }} 
        steps:
          - name: clone repo
            uses: actions/checkout@v2
                                    
          - name: Get OpenVPN websockets and other dependencies
            run: |
                sudo apt-get -y update
                sudo apt -y install openvpn sshpass curl jq
                pip install websockets asyncio

          - name: install npm
            uses: actions/setup-node@v3
            with:
              node-version: 16

          - name: npm dependencies
            run: |
              npm install @arm-avh/avh-api --save
              npm install mocha
              npm install split2
              npm install websocket-stream
              npm install promise-socket
              
          - name: sensor demo
            run: |
              cd ronan
              mkdir test
              # cp Projects/B-U585I-IOT02A/Demonstrations/IOT_HTTP_WebServer/MDK-ARM/STM32CubeU5_Demo_U585I-IOT02A/Exe/STM32CubeU5_Demo_U585I-IOT02A.axf ronan/test/demo.axf
              cp STM32CubeU5_Demo_U585I-IOT02A.axf test/demo.axf
              cp example-sensor-test.js test/index.js
              cd test
              pwd
              ls
              export REPORT_PATH=report.json
              npm run test
              
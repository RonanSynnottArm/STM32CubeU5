<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32CubeU5_Demo_U585I-IOT02A\Exe\STM32CubeU5_Demo_U585I-IOT02A.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32CubeU5_Demo_U585I-IOT02A\Exe\STM32CubeU5_Demo_U585I-IOT02A.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Fri Sep 16 13:43:03 2022
<BR><P>
<H3>Maximum Stack Usage =       1744 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; app_entry &rArr; webserver_http_start &rArr; http_send_response &rArr; webserver_http_encode_image_response &rArr; __2sprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[30]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[139]">HAL_SPI_ErrorCallback</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[139]">HAL_SPI_ErrorCallback</a><BR>
 <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7c]">ADC4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7b]">ADF1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[68]">AES_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[8f]">BSP_GetTick</a> from b_u585i_iot02a_bus.o(.text.BSP_GetTick) referenced 4 times from b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
 <LI><a href="#[8c]">BSP_I2C2_DeInit</a> from b_u585i_iot02a_bus.o(.text.BSP_I2C2_DeInit) referenced 4 times from b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
 <LI><a href="#[8b]">BSP_I2C2_Init</a> from b_u585i_iot02a_bus.o(.text.BSP_I2C2_Init) referenced 4 times from b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
 <LI><a href="#[8d]">BSP_I2C2_ReadReg</a> from b_u585i_iot02a_bus.o(.text.BSP_I2C2_ReadReg) referenced 4 times from b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
 <LI><a href="#[8e]">BSP_I2C2_WriteReg</a> from b_u585i_iot02a_bus.o(.text.BSP_I2C2_WriteReg) referenced 4 times from b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32u5xx_it.o(.text.BusFault_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[53]">COMP_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[86]">CORDIC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[55]">CRS_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[31]">DAC1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7a]">DCACHE1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[82]">DCMI_PSSI_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[81]">DMA2D_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32u5xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[20]">EXTI10_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[21]">EXTI11_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[22]">EXTI12_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[23]">EXTI13_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[24]">EXTI14_IRQHandler</a> from stm32u5xx_it.o(.text.EXTI14_IRQHandler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[25]">EXTI15_IRQHandler</a> from stm32u5xx_it.o(.text.EXTI15_IRQHandler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1b]">EXTI5_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1c]">EXTI6_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1d]">EXTI7_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1e]">EXTI8_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1f]">EXTI9_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[32]">FDCAN1_IT0_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[33]">FDCAN1_IT1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[12]">FLASH_S_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[87]">FMAC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[56]">FMC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[28]">GPDMA1_Channel0_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5d]">GPDMA1_Channel10_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5e]">GPDMA1_Channel11_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5f]">GPDMA1_Channel12_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[60]">GPDMA1_Channel13_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[61]">GPDMA1_Channel14_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[62]">GPDMA1_Channel15_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[29]">GPDMA1_Channel1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2a]">GPDMA1_Channel2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2b]">GPDMA1_Channel3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2c]">GPDMA1_Channel4_IRQHandler</a> from stm32u5xx_it.o(.text.GPDMA1_Channel4_IRQHandler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2d]">GPDMA1_Channel5_IRQHandler</a> from stm32u5xx_it.o(.text.GPDMA1_Channel5_IRQHandler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2e]">GPDMA1_Channel6_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2f]">GPDMA1_Channel7_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5b]">GPDMA1_Channel8_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5c]">GPDMA1_Channel9_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[13]">GTZC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[91]">HAL_LPTIM_AutoReloadMatchCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_AutoReloadMatchCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[94]">HAL_LPTIM_AutoReloadWriteCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_AutoReloadWriteCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[90]">HAL_LPTIM_CompareMatchCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_CompareMatchCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[93]">HAL_LPTIM_CompareWriteCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_CompareWriteCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[96]">HAL_LPTIM_DirectionDownCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_DirectionDownCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[95]">HAL_LPTIM_DirectionUpCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_DirectionUpCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[9d]">HAL_LPTIM_ErrorCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_ErrorCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[9a]">HAL_LPTIM_IC_CaptureCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_IC_CaptureCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[9b]">HAL_LPTIM_IC_CaptureHalfCpltCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_IC_CaptureHalfCpltCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[9c]">HAL_LPTIM_IC_OverCaptureCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_IC_OverCaptureCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[9e]">HAL_LPTIM_MspInit</a> from stm32u5xx_hal_msp.o(.text.HAL_LPTIM_MspInit) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[98]">HAL_LPTIM_RepCounterWriteCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_RepCounterWriteCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[92]">HAL_LPTIM_TriggerCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_TriggerCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[97]">HAL_LPTIM_UpdateEventCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_UpdateEventCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[99]">HAL_LPTIM_UpdateEventHalfCpltCallback</a> from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_UpdateEventHalfCpltCallback) referenced 2 times from stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
 <LI><a href="#[6b]">HASH_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[cc]">HTS221_DeInit</a> from hts221.o(.text.HTS221_DeInit) referenced from hts221.o(.data.HTS221_COMMON_Driver)
 <LI><a href="#[ce]">HTS221_GetCapabilities</a> from hts221.o(.text.HTS221_GetCapabilities) referenced from hts221.o(.data.HTS221_COMMON_Driver)
 <LI><a href="#[d0]">HTS221_HUM_Disable</a> from hts221.o(.text.HTS221_HUM_Disable) referenced from hts221.o(.data.HTS221_HUM_Driver)
 <LI><a href="#[cf]">HTS221_HUM_Enable</a> from hts221.o(.text.HTS221_HUM_Enable) referenced from hts221.o(.data.HTS221_HUM_Driver)
 <LI><a href="#[d3]">HTS221_HUM_GetHumidity</a> from hts221.o(.text.HTS221_HUM_GetHumidity) referenced from hts221.o(.data.HTS221_HUM_Driver)
 <LI><a href="#[d1]">HTS221_HUM_GetOutputDataRate</a> from hts221.o(.text.HTS221_HUM_GetOutputDataRate) referenced from hts221.o(.data.HTS221_HUM_Driver)
 <LI><a href="#[d2]">HTS221_HUM_SetOutputDataRate</a> from hts221.o(.text.HTS221_HUM_SetOutputDataRate) referenced from hts221.o(.data.HTS221_HUM_Driver)
 <LI><a href="#[cb]">HTS221_Init</a> from hts221.o(.text.HTS221_Init) referenced from hts221.o(.data.HTS221_COMMON_Driver)
 <LI><a href="#[cd]">HTS221_ReadID</a> from hts221.o(.text.HTS221_ReadID) referenced from hts221.o(.data.HTS221_COMMON_Driver)
 <LI><a href="#[d5]">HTS221_TEMP_Disable</a> from hts221.o(.text.HTS221_TEMP_Disable) referenced from hts221.o(.data.HTS221_TEMP_Driver)
 <LI><a href="#[d4]">HTS221_TEMP_Enable</a> from hts221.o(.text.HTS221_TEMP_Enable) referenced from hts221.o(.data.HTS221_TEMP_Driver)
 <LI><a href="#[d6]">HTS221_TEMP_GetOutputDataRate</a> from hts221.o(.text.HTS221_TEMP_GetOutputDataRate) referenced from hts221.o(.data.HTS221_TEMP_Driver)
 <LI><a href="#[d8]">HTS221_TEMP_GetTemperature</a> from hts221.o(.text.HTS221_TEMP_GetTemperature) referenced from hts221.o(.data.HTS221_TEMP_Driver)
 <LI><a href="#[d7]">HTS221_TEMP_SetOutputDataRate</a> from hts221.o(.text.HTS221_TEMP_SetOutputDataRate) referenced from hts221.o(.data.HTS221_TEMP_Driver)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32u5xx_it.o(.text.HardFault_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[45]">I2C2_ER_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[44]">I2C2_EV_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6f]">I2C4_ER_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[70]">I2C4_EV_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[76]">ICACHE_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[26]">IWDG_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7d]">LPDMA1_Channel0_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7e]">LPDMA1_Channel1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7f]">LPDMA1_Channel2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[80]">LPDMA1_Channel3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[da]">LPS22HH_DeInit</a> from lps22hh.o(.text.LPS22HH_DeInit) referenced from lps22hh.o(.data.LPS22HH_COMMON_Driver)
 <LI><a href="#[dc]">LPS22HH_GetCapabilities</a> from lps22hh.o(.text.LPS22HH_GetCapabilities) referenced from lps22hh.o(.data.LPS22HH_COMMON_Driver)
 <LI><a href="#[d9]">LPS22HH_Init</a> from lps22hh.o(.text.LPS22HH_Init) referenced from lps22hh.o(.data.LPS22HH_COMMON_Driver)
 <LI><a href="#[de]">LPS22HH_PRESS_Disable</a> from lps22hh.o(.text.LPS22HH_PRESS_Disable) referenced from lps22hh.o(.data.LPS22HH_PRESS_Driver)
 <LI><a href="#[dd]">LPS22HH_PRESS_Enable</a> from lps22hh.o(.text.LPS22HH_PRESS_Enable) referenced from lps22hh.o(.data.LPS22HH_PRESS_Driver)
 <LI><a href="#[df]">LPS22HH_PRESS_GetOutputDataRate</a> from lps22hh.o(.text.LPS22HH_PRESS_GetOutputDataRate) referenced from lps22hh.o(.data.LPS22HH_PRESS_Driver)
 <LI><a href="#[e1]">LPS22HH_PRESS_GetPressure</a> from lps22hh.o(.text.LPS22HH_PRESS_GetPressure) referenced from lps22hh.o(.data.LPS22HH_PRESS_Driver)
 <LI><a href="#[e0]">LPS22HH_PRESS_SetOutputDataRate</a> from lps22hh.o(.text.LPS22HH_PRESS_SetOutputDataRate) referenced from lps22hh.o(.data.LPS22HH_PRESS_Driver)
 <LI><a href="#[db]">LPS22HH_ReadID</a> from lps22hh.o(.text.LPS22HH_ReadID) referenced from lps22hh.o(.data.LPS22HH_COMMON_Driver)
 <LI><a href="#[e3]">LPS22HH_TEMP_Disable</a> from lps22hh.o(.text.LPS22HH_TEMP_Disable) referenced from lps22hh.o(.data.LPS22HH_TEMP_Driver)
 <LI><a href="#[e2]">LPS22HH_TEMP_Enable</a> from lps22hh.o(.text.LPS22HH_TEMP_Enable) referenced from lps22hh.o(.data.LPS22HH_TEMP_Driver)
 <LI><a href="#[e4]">LPS22HH_TEMP_GetOutputDataRate</a> from lps22hh.o(.text.LPS22HH_TEMP_GetOutputDataRate) referenced from lps22hh.o(.data.LPS22HH_TEMP_Driver)
 <LI><a href="#[e6]">LPS22HH_TEMP_GetTemperature</a> from lps22hh.o(.text.LPS22HH_TEMP_GetTemperature) referenced from lps22hh.o(.data.LPS22HH_TEMP_Driver)
 <LI><a href="#[e5]">LPS22HH_TEMP_SetOutputDataRate</a> from lps22hh.o(.text.LPS22HH_TEMP_SetOutputDataRate) referenced from lps22hh.o(.data.LPS22HH_TEMP_Driver)
 <LI><a href="#[4e]">LPTIM1_IRQHandler</a> from stm32u5xx_it.o(.text.LPTIM1_IRQHandler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4f]">LPTIM2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6d]">LPTIM3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[79]">LPTIM4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[c6]">LPTIM_UpdateEventCallback</a> from system_config.o(.text.LPTIM_UpdateEventCallback) referenced 2 times from system_config.o(.text.system_init)
 <LI><a href="#[4d]">LPUART1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[71]">MDF1_FLT0_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[72]">MDF1_FLT1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[73]">MDF1_FLT2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[74]">MDF1_FLT3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[84]">MDF1_FLT4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[85]">MDF1_FLT5_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[c4]">MX_WIFI_IO_DELAY</a> from net_conf_mxchip_spi.o(.text.MX_WIFI_IO_DELAY) referenced 2 times from net_conf_mxchip_spi.o(.text.mxwifi_probe)
 <LI><a href="#[c3]">MX_WIFI_SPI_DeInit</a> from net_conf_mxchip_spi.o(.text.MX_WIFI_SPI_DeInit) referenced 2 times from net_conf_mxchip_spi.o(.text.mxwifi_probe)
 <LI><a href="#[c2]">MX_WIFI_SPI_Init</a> from net_conf_mxchip_spi.o(.text.MX_WIFI_SPI_Init) referenced 2 times from net_conf_mxchip_spi.o(.text.mxwifi_probe)
 <LI><a href="#[c5]">MX_WIFI_SPI_Read</a> from net_conf_mxchip_spi.o(.text.MX_WIFI_SPI_Read) referenced 2 times from net_conf_mxchip_spi.o(.text.mxwifi_probe)
 <LI><a href="#[c1]">MX_WIFI_SPI_Write</a> from net_conf_mxchip_spi.o(.text.MX_WIFI_SPI_Write) referenced 2 times from net_conf_mxchip_spi.o(.text.mxwifi_probe)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32u5xx_it.o(.text.MemManage_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32u5xx_it.o(.text.NMI_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[57]">OCTOSPI1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[83]">OCTOSPI2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[77]">OTFDEC1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[78]">OTFDEC2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[54]">OTG_FS_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6c]">PKA_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[c]">PVD_AVD_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[58]">PWR_S3WU_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32u5xx_it.o(.text.PendSV_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[10]">RAMCFG_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[15]">RCC_S_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[69]">RNG_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[e]">RTC_S_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[a0]">ReadRegWrap</a> from hts221.o(.text.ReadRegWrap) referenced 2 times from hts221.o(.text.HTS221_RegisterBusIO)
 <LI><a href="#[a2]">ReadRegWrap</a> from lps22hh.o(.text.ReadRegWrap) referenced 2 times from lps22hh.o(.text.LPS22HH_RegisterBusIO)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[27]">SAES_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[65]">SAI1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[66]">SAI2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[59]">SDMMC1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5a]">SDMMC2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[46]">SPI1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from stm32u5xx_it.o(.text.SPI2_IRQHandler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6e]">SPI3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[9f]">SPI_DMAAbortOnError</a> from stm32u5xx_hal_spi.o(.text.SPI_DMAAbortOnError) referenced 2 times from stm32u5xx_hal_spi.o(.text.HAL_SPI_IRQHandler)
 <LI><a href="#[7]">SVC_Handler</a> from stm32u5xx_it.o(.text.SVC_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from stm32u5xx_it.o(.text.SecureFault_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32u5xx_it.o(.text.SysTick_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[89]">SystemInit</a> from system_stm32u5xx.o(.text.SystemInit) referenced from startup_stm32u585xx.o(.text)
 <LI><a href="#[f]">TAMP_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[50]">TIM15_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[51]">TIM16_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[52]">TIM17_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[35]">TIM1_UP_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3c]">TIM6_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[67]">TSC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[75]">UCPD1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[48]">USART1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[49]">USART2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4a]">USART3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32u5xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[a1]">WriteRegWrap</a> from hts221.o(.text.WriteRegWrap) referenced 2 times from hts221.o(.text.HTS221_RegisterBusIO)
 <LI><a href="#[a3]">WriteRegWrap</a> from lps22hh.o(.text.WriteRegWrap) referenced 2 times from lps22hh.o(.text.LPS22HH_RegisterBusIO)
 <LI><a href="#[8a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32u585xx.o(.text)
 <LI><a href="#[ca]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[c9]">fputc</a> from console.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[c8]">hnet_notify</a> from webserver_wifi.o(.text.hnet_notify) referenced 2 times from webserver_wifi.o(.text.webserver_wifi_connect)
 <LI><a href="#[88]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[e7]">mapi_reboot_event_callback</a> from mx_wifi_ipc.o(.text.mapi_reboot_event_callback) referenced from mx_wifi_ipc.o(.data.event_table)
 <LI><a href="#[e9]">mapi_wifi_netlink_input_callback</a> from mx_wifi_ipc.o(.text.mapi_wifi_netlink_input_callback) referenced from mx_wifi_ipc.o(.data.event_table)
 <LI><a href="#[e8]">mapi_wifi_status_event_callback</a> from mx_wifi_ipc.o(.text.mapi_wifi_status_event_callback) referenced from mx_wifi_ipc.o(.data.event_table)
 <LI><a href="#[a4]">mipc_poll</a> from mx_wifi_ipc.o(.text.mipc_poll) referenced 2 times from mx_wifi_ipc.o(.text.mipc_request)
 <LI><a href="#[b0]">mx_wifi_accept</a> from net_mx_wifi.o(.text.mx_wifi_accept) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[ae]">mx_wifi_bind</a> from net_mx_wifi.o(.text.mx_wifi_bind) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[ba]">mx_wifi_close</a> from net_mx_wifi.o(.text.mx_wifi_close) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[b1]">mx_wifi_connect</a> from net_mx_wifi.o(.text.mx_wifi_connect) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[c7]">mx_wifi_driver</a> from net_mx_wifi.o(.text.mx_wifi_driver) referenced 2 times from webserver_wifi.o(.text.webserver_wifi_connect)
 <LI><a href="#[bf]">mx_wifi_get_scan_result</a> from net_mx_wifi.o(.text.mx_wifi_get_scan_result) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[bc]">mx_wifi_gethostbyname</a> from net_mx_wifi.o(.text.mx_wifi_gethostbyname) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[b9]">mx_wifi_getpeername</a> from net_mx_wifi.o(.text.mx_wifi_getpeername) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[b8]">mx_wifi_getsockname</a> from net_mx_wifi.o(.text.mx_wifi_getsockname) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[b7]">mx_wifi_getsockopt</a> from net_mx_wifi.o(.text.mx_wifi_getsockopt) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[ab]">mx_wifi_if_connect</a> from net_mx_wifi.o(.text.mx_wifi_if_connect) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[a7]">mx_wifi_if_deinit</a> from net_mx_wifi.o(.text.mx_wifi_if_deinit) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[ac]">mx_wifi_if_disconnect</a> from net_mx_wifi.o(.text.mx_wifi_if_disconnect) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[a6]">mx_wifi_if_init</a> from net_mx_wifi.o(.text.mx_wifi_if_init) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[a8]">mx_wifi_if_start</a> from net_mx_wifi.o(.text.mx_wifi_if_start) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[a9]">mx_wifi_if_stop</a> from net_mx_wifi.o(.text.mx_wifi_if_stop) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[aa]">mx_wifi_if_yield</a> from net_mx_wifi.o(.text.mx_wifi_if_yield) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[af]">mx_wifi_listen</a> from net_mx_wifi.o(.text.mx_wifi_listen) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[bd]">mx_wifi_ping</a> from net_mx_wifi.o(.text.mx_wifi_ping) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[b3]">mx_wifi_recv</a> from net_mx_wifi.o(.text.mx_wifi_recv) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[b5]">mx_wifi_recvfrom</a> from net_mx_wifi.o(.text.mx_wifi_recvfrom) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[be]">mx_wifi_scan</a> from net_mx_wifi.o(.text.mx_wifi_scan) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[b2]">mx_wifi_send</a> from net_mx_wifi.o(.text.mx_wifi_send) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[b4]">mx_wifi_sendto</a> from net_mx_wifi.o(.text.mx_wifi_sendto) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[b6]">mx_wifi_setsockopt</a> from net_mx_wifi.o(.text.mx_wifi_setsockopt) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[bb]">mx_wifi_shutdown</a> from net_mx_wifi.o(.text.mx_wifi_shutdown) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[ad]">mx_wifi_socket</a> from net_mx_wifi.o(.text.mx_wifi_socket) referenced 2 times from net_mx_wifi.o(.text.mx_wifi_if_init)
 <LI><a href="#[c0]">mx_wifi_status_changed</a> from net_mx_wifi.o(.text.mx_wifi_status_changed) referenced 4 times from net_mx_wifi.o(.text.mx_wifi_if_start)
 <LI><a href="#[a5]">process_txrx_poll</a> from net_conf_mxchip_spi.o(.text.process_txrx_poll) referenced 2 times from mx_wifi_hci.o(.text.mx_wifi_hci_recv)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(.text)
</UL>
<P><STRONG><a name="[207]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ea]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fd]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[208]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[209]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[20a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[20b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[20c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>ADF1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DCACHE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPDMA1_Channel10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPDMA1_Channel11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPDMA1_Channel12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPDMA1_Channel13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPDMA1_Channel14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPDMA1_Channel15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPDMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPDMA1_Channel9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>LPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>LPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>LPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>LPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>MDF1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>MDF1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>MDF1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>MDF1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>MDF1_FLT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>MDF1_FLT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTFDEC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PWR_S3WU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RAMCFG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SAES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_ping
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_gethostbyname
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recvfrom
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recv
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_sendto
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_send
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_getsockopt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_setsockopt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_StartAP
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Get_scan_result
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Scan
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_poll
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_get_scan_result
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_ping
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_image_response
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_json_response
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_woff2_response
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_sensor_response
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_favicon_response
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_js_response
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_css_response
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_html_response
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_ping
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_gethostbyname
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Scan
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_ping
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_get_scan_result
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_start
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[f1]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1f0]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_image_response
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_json_response
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_woff2_response
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_sensor_response
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_favicon_response
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_js_response
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_css_response
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_html_response
</UL>

<P><STRONG><a name="[171]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Connect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
</UL>

<P><STRONG><a name="[170]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_image_response
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_json_response
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_woff2_response
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_sensor_response
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_favicon_response
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_js_response
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_css_response
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_html_response
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_ping
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_gethostbyname
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Connect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_get_scan_result
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_scan
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
</UL>

<P><STRONG><a name="[1a9]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWifiGetDefaultStation
</UL>

<P><STRONG><a name="[1d3]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_image_response
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_json_response
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_woff2_response
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_sensor_response
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_favicon_response
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_js_response
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_css_response
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_html_response
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_start
</UL>

<P><STRONG><a name="[1f4]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[f2]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceOn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_get_scan_result
</UL>

<P><STRONG><a name="[1f7]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[211]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[212]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[203]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[eb]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[214]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[215]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f6]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1fb]"></a>BSP_ENV_SENSOR_DeInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_ENV_SENSOR_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_sensors_start
</UL>

<P><STRONG><a name="[1fc]"></a>BSP_ENV_SENSOR_Enable</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ENV_SENSOR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_sensors_start
</UL>

<P><STRONG><a name="[1fe]"></a>BSP_ENV_SENSOR_GetOutputDataRate</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ENV_SENSOR_GetOutputDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_sensors_start
</UL>

<P><STRONG><a name="[1fa]"></a>BSP_ENV_SENSOR_GetValue</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ENV_SENSOR_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_press_sensor_read
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_temp_sensor_read
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_humid_sensor_read
</UL>

<P><STRONG><a name="[fe]"></a>BSP_ENV_SENSOR_Init</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_ENV_SENSOR_Init &rArr; LPS22HH_RegisterBusIO &rArr; lps22hh_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadID
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_RegisterBusIO
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_ReadID
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_sensors_start
</UL>

<P><STRONG><a name="[1fd]"></a>BSP_ENV_SENSOR_SetOutputDataRate</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ENV_SENSOR_SetOutputDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_sensors_start
</UL>

<P><STRONG><a name="[8f]"></a>BSP_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, b_u585i_iot02a_bus.o(.text.BSP_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
</UL>
<P><STRONG><a name="[8c]"></a>BSP_I2C2_DeInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, b_u585i_iot02a_bus.o(.text.BSP_I2C2_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_I2C2_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
</UL>
<P><STRONG><a name="[8b]"></a>BSP_I2C2_Init</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, b_u585i_iot02a_bus.o(.text.BSP_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_I2C2_Init &rArr; I2C_GetTiming
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTiming
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
</UL>
<P><STRONG><a name="[8d]"></a>BSP_I2C2_ReadReg</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, b_u585i_iot02a_bus.o(.text.BSP_I2C2_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_I2C2_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
</UL>
<P><STRONG><a name="[8e]"></a>BSP_I2C2_WriteReg</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, b_u585i_iot02a_bus.o(.text.BSP_I2C2_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_I2C2_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> b_u585i_iot02a_env_sensors.o(.text.BSP_ENV_SENSOR_Init)
</UL>
<P><STRONG><a name="[10c]"></a>BSP_LED_DeInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, b_u585i_iot02a.o(.text.BSP_LED_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_LED_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_process_error
</UL>

<P><STRONG><a name="[10e]"></a>BSP_LED_Init</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, b_u585i_iot02a.o(.text.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[10f]"></a>BSP_LED_On</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, b_u585i_iot02a.o(.text.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_process_error
</UL>

<P><STRONG><a name="[110]"></a>BSP_LED_Toggle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, b_u585i_iot02a.o(.text.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_UpdateEventCallback
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.EXTI14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI14_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.EXTI15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.GPDMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA1_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.GPDMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>HAL_DMA_Abort</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32u5xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>

<P><STRONG><a name="[13d]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32u5xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32u5xx_hal_dma.o(.text.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>

<P><STRONG><a name="[113]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, stm32u5xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA1_Channel5_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>HAL_DMA_Init</STRONG> (Thumb, 1426 bytes, Stack size 16 bytes, stm32u5xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[116]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32u5xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_SPI_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_IO_DELAY
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_connect
</UL>

<P><STRONG><a name="[102]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 394 bytes, Stack size 44 bytes, stm32u5xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_DeInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_DeInit
</UL>

<P><STRONG><a name="[118]"></a>HAL_GPIO_EXTI_Falling_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Falling_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32u5xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Rising_Callback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Falling_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI14_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_GPIO_EXTI_Rising_Callback</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, webserver_wifi.o(.text.HAL_GPIO_EXTI_Rising_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchip_WIFI_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_GPIO_Init</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, stm32u5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32u5xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_flow_high
</UL>

<P><STRONG><a name="[111]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32u5xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[10d]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32u5xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_SPI_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_DeInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32u5xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_wait_state
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_sem_wait
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_fifo_pop
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_fifo_push
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[16d]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32u5xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[16e]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32u5xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32u5xx_hal_i2c.o(.text.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_DeInit
</UL>

<P><STRONG><a name="[10a]"></a>HAL_I2C_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32u5xx_hal_i2c.o(.text.HAL_I2C_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_ReadReg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_WriteReg
</UL>

<P><STRONG><a name="[104]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32u5xx_hal_i2c.o(.text.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_I2C_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32u5xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, stm32u5xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_ReadReg
</UL>

<P><STRONG><a name="[10b]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, stm32u5xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_WriteReg
</UL>

<P><STRONG><a name="[11a]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_i2c.o(.text.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[11c]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_ICACHE_ConfigAssociativityMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32u5xx_hal_icache.o(.text.HAL_ICACHE_ConfigAssociativityMode))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instruction_cache_enable
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_ICACHE_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32u5xx_hal_icache.o(.text.HAL_ICACHE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instruction_cache_enable
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32u5xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[121]"></a>HAL_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32u5xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>HAL_InitTick</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32u5xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[91]"></a>HAL_LPTIM_AutoReloadMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_AutoReloadMatchCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[94]"></a>HAL_LPTIM_AutoReloadWriteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_AutoReloadWriteCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[90]"></a>HAL_LPTIM_CompareMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_CompareMatchCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[93]"></a>HAL_LPTIM_CompareWriteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_CompareWriteCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[96]"></a>HAL_LPTIM_DirectionDownCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_DirectionDownCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[95]"></a>HAL_LPTIM_DirectionUpCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_DirectionUpCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[9d]"></a>HAL_LPTIM_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_ErrorCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[9a]"></a>HAL_LPTIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_IC_CaptureCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[9b]"></a>HAL_LPTIM_IC_CaptureHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_IC_CaptureHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[9c]"></a>HAL_LPTIM_IC_OverCaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_IC_OverCaptureCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[16c]"></a>HAL_LPTIM_IRQHandler</STRONG> (Thumb, 502 bytes, Stack size 8 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LPTIM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_IRQHandler
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_LPTIM_Init</STRONG> (Thumb, 614 bytes, Stack size 24 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_LPTIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_LPTIM_MspInit</STRONG> (Thumb, 120 bytes, Stack size 312 bytes, stm32u5xx_hal_msp.o(.text.HAL_LPTIM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = HAL_LPTIM_MspInit &rArr; webserver_process_error &rArr; BSP_LED_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_process_error
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[1ea]"></a>HAL_LPTIM_OC_ConfigChannel</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LPTIM_OC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_LPTIM_PWM_Start_IT</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_PWM_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LPTIM_PWM_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_LPTIM_RegisterCallback</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[98]"></a>HAL_LPTIM_RepCounterWriteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_RepCounterWriteCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[92]"></a>HAL_LPTIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_TriggerCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[97]"></a>HAL_LPTIM_UpdateEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_UpdateEventCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[99]"></a>HAL_LPTIM_UpdateEventHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_UpdateEventHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_lptim.o(.text.HAL_LPTIM_Init)
</UL>
<P><STRONG><a name="[125]"></a>HAL_MspInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32u5xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddIO2
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32u5xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[127]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32u5xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[122]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32u5xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[12d]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[12c]"></a>HAL_PWREx_EnableVddIO2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableVddIO2))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[138]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[130]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[134]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[12f]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[12e]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 2306 bytes, Stack size 24 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[12a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1622 bytes, Stack size 40 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[137]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 766 bytes, Stack size 40 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[131]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[106]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[133]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[132]"></a>HAL_RCC_GetPCLK3Freq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK3Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[123]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[128]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2888 bytes, Stack size 32 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[139]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_conf_mxchip_spi.o(.text.HAL_SPI_ErrorCallback))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[13a]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 636 bytes, Stack size 40 bytes, stm32u5xx_hal_spi.o(.text.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_SPI_Init</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, stm32u5xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; webserver_process_error &rArr; BSP_LED_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_init
</UL>

<P><STRONG><a name="[141]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 370 bytes, Stack size 264 bytes, stm32u5xx_hal_msp.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = HAL_SPI_MspInit &rArr; webserver_process_error &rArr; BSP_LED_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_process_error
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_SPI_Receive</STRONG> (Thumb, 750 bytes, Stack size 32 bytes, stm32u5xx_hal_spi.o(.text.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
</UL>

<P><STRONG><a name="[13f]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, webserver_wifi.o(.text.HAL_SPI_RxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransferCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>HAL_SPI_TransferCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_conf_mxchip_spi.o(.text.HAL_SPI_TransferCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
</UL>

<P><STRONG><a name="[146]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, stm32u5xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
</UL>

<P><STRONG><a name="[144]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 1100 bytes, Stack size 32 bytes, stm32u5xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
</UL>

<P><STRONG><a name="[13e]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, webserver_wifi.o(.text.HAL_SPI_TxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransferCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, webserver_wifi.o(.text.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransferCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32u5xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[126]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32u5xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32u5xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_config
</UL>

<P><STRONG><a name="[147]"></a>HAL_UART_AbortReceive</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, stm32u5xx_hal_uart.o(.text.HAL_UART_AbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_AbortReceive &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_password
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_ssid
</UL>

<P><STRONG><a name="[149]"></a>HAL_UART_Init</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, stm32u5xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_config
</UL>

<P><STRONG><a name="[14a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 124 bytes, Stack size 240 bytes, stm32u5xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[14e]"></a>HAL_UART_Receive</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32u5xx_hal_uart.o(.text.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_password
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_ssid
</UL>

<P><STRONG><a name="[14f]"></a>HAL_UART_Transmit</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, stm32u5xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cc]"></a>HTS221_DeInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hts221.o(.text.HTS221_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HTS221_DeInit &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_COMMON_Driver)
</UL>
<P><STRONG><a name="[ce]"></a>HTS221_GetCapabilities</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hts221.o(.text.HTS221_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_COMMON_Driver)
</UL>
<P><STRONG><a name="[d0]"></a>HTS221_HUM_Disable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_HUM_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTS221_HUM_Disable &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_HUM_Driver)
</UL>
<P><STRONG><a name="[cf]"></a>HTS221_HUM_Enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_HUM_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTS221_HUM_Enable &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_HUM_Driver)
</UL>
<P><STRONG><a name="[d3]"></a>HTS221_HUM_GetHumidity</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, hts221.o(.text.HTS221_HUM_GetHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HTS221_HUM_GetHumidity &rArr; hts221_humidity_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_humidity_raw_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_1_get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_1_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_0_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_0_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_HUM_Driver)
</UL>
<P><STRONG><a name="[d1]"></a>HTS221_HUM_GetOutputDataRate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hts221.o(.text.HTS221_HUM_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HTS221_HUM_GetOutputDataRate &rArr; hts221_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_HUM_Driver)
</UL>
<P><STRONG><a name="[d2]"></a>HTS221_HUM_SetOutputDataRate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_HUM_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTS221_HUM_SetOutputDataRate &rArr; hts221_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_HUM_Driver)
</UL>
<P><STRONG><a name="[cb]"></a>HTS221_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hts221.o(.text.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HTS221_Init &rArr; hts221_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_set
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_block_data_update_set
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_COMMON_Driver)
</UL>
<P><STRONG><a name="[cd]"></a>HTS221_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTS221_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_COMMON_Driver)
</UL>
<P><STRONG><a name="[100]"></a>HTS221_RegisterBusIO</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hts221.o(.text.HTS221_RegisterBusIO))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_Init
</UL>

<P><STRONG><a name="[d5]"></a>HTS221_TEMP_Disable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_TEMP_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTS221_TEMP_Disable &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_TEMP_Driver)
</UL>
<P><STRONG><a name="[d4]"></a>HTS221_TEMP_Enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_TEMP_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTS221_TEMP_Enable &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_TEMP_Driver)
</UL>
<P><STRONG><a name="[d6]"></a>HTS221_TEMP_GetOutputDataRate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hts221.o(.text.HTS221_TEMP_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HTS221_TEMP_GetOutputDataRate &rArr; hts221_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_TEMP_Driver)
</UL>
<P><STRONG><a name="[d8]"></a>HTS221_TEMP_GetTemperature</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, hts221.o(.text.HTS221_TEMP_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HTS221_TEMP_GetTemperature &rArr; hts221_temperature_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temperature_raw_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_1_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_1_get
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_0_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_0_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_TEMP_Driver)
</UL>
<P><STRONG><a name="[d7]"></a>HTS221_TEMP_SetOutputDataRate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_TEMP_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTS221_TEMP_SetOutputDataRate &rArr; hts221_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_TEMP_Driver)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>LPS22HH_DeInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_DeInit &rArr; lps22hh_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_COMMON_Driver)
</UL>
<P><STRONG><a name="[dc]"></a>LPS22HH_GetCapabilities</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lps22hh.o(.text.LPS22HH_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_COMMON_Driver)
</UL>
<P><STRONG><a name="[d9]"></a>LPS22HH_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_Init &rArr; lps22hh_auto_increment_set
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_auto_increment_set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_block_data_update_set
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_lp_bandwidth_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_i3c_interface_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_COMMON_Driver)
</UL>
<P><STRONG><a name="[de]"></a>LPS22HH_PRESS_Disable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_PRESS_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_PRESS_Disable &rArr; lps22hh_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_PRESS_Driver)
</UL>
<P><STRONG><a name="[dd]"></a>LPS22HH_PRESS_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps22hh.o(.text.LPS22HH_PRESS_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPS22HH_PRESS_Enable &rArr; lps22hh_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_PRESS_Driver)
</UL>
<P><STRONG><a name="[df]"></a>LPS22HH_PRESS_GetOutputDataRate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_PRESS_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_PRESS_GetOutputDataRate &rArr; lps22hh_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_PRESS_Driver)
</UL>
<P><STRONG><a name="[e1]"></a>LPS22HH_PRESS_GetPressure</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_PRESS_GetPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_PRESS_GetPressure &rArr; lps22hh_pressure_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_from_lsb_to_hpa
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_pressure_raw_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_PRESS_Driver)
</UL>
<P><STRONG><a name="[e0]"></a>LPS22HH_PRESS_SetOutputDataRate</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_PRESS_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_PRESS_SetOutputDataRate &rArr; lps22hh_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_PRESS_Driver)
</UL>
<P><STRONG><a name="[db]"></a>LPS22HH_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hh.o(.text.LPS22HH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPS22HH_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_COMMON_Driver)
</UL>
<P><STRONG><a name="[ff]"></a>LPS22HH_RegisterBusIO</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPS22HH_RegisterBusIO &rArr; lps22hh_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_Init
</UL>

<P><STRONG><a name="[e3]"></a>LPS22HH_TEMP_Disable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_TEMP_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_TEMP_Disable &rArr; lps22hh_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_TEMP_Driver)
</UL>
<P><STRONG><a name="[e2]"></a>LPS22HH_TEMP_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps22hh.o(.text.LPS22HH_TEMP_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPS22HH_TEMP_Enable &rArr; lps22hh_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_TEMP_Driver)
</UL>
<P><STRONG><a name="[e4]"></a>LPS22HH_TEMP_GetOutputDataRate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_TEMP_GetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_TEMP_GetOutputDataRate &rArr; lps22hh_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_TEMP_Driver)
</UL>
<P><STRONG><a name="[e6]"></a>LPS22HH_TEMP_GetTemperature</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_TEMP_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_TEMP_GetTemperature &rArr; lps22hh_temperature_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_from_lsb_to_celsius
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_temperature_raw_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_TEMP_Driver)
</UL>
<P><STRONG><a name="[e5]"></a>LPS22HH_TEMP_SetOutputDataRate</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_TEMP_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_TEMP_SetOutputDataRate &rArr; lps22hh_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.data.LPS22HH_TEMP_Driver)
</UL>
<P><STRONG><a name="[4e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.LPTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIM1_IRQHandler &rArr; HAL_LPTIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>MX_I2C2_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, b_u585i_iot02a_bus.o(.text.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_Init
</UL>

<P><STRONG><a name="[16f]"></a>MX_WIFI_Connect</STRONG> (Thumb, 316 bytes, Stack size 272 bytes, mx_wifi.o(.text.MX_WIFI_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MX_WIFI_Connect &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_ntoa
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_start
</UL>

<P><STRONG><a name="[174]"></a>MX_WIFI_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mx_wifi.o(.text.MX_WIFI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_WIFI_DeInit &rArr; mipc_deinit &rArr; mx_wifi_hci_deinit &rArr; noos_fifo_deinit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_deinit
</UL>

<P><STRONG><a name="[176]"></a>MX_WIFI_Disconnect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mx_wifi.o(.text.MX_WIFI_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_WIFI_Disconnect &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_stop
</UL>

<P><STRONG><a name="[177]"></a>MX_WIFI_GetIPAddress</STRONG> (Thumb, 128 bytes, Stack size 104 bytes, mx_wifi.o(.text.MX_WIFI_GetIPAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MX_WIFI_GetIPAddress &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_aton_r
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_connect
</UL>

<P><STRONG><a name="[1d1]"></a>MX_WIFI_GetMACAddress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mx_wifi.o(.text.MX_WIFI_GetMACAddress))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
</UL>

<P><STRONG><a name="[179]"></a>MX_WIFI_Get_scan_result</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mx_wifi.o(.text.MX_WIFI_Get_scan_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_WIFI_Get_scan_result
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_get_scan_result
</UL>

<P><STRONG><a name="[1d2]"></a>MX_WIFI_HardResetModule</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mx_wifi.o(.text.MX_WIFI_HardResetModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_WIFI_HardResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
</UL>

<P><STRONG><a name="[17b]"></a>MX_WIFI_IO_YIELD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mx_wifi.o(.text.MX_WIFI_IO_YIELD))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_WIFI_IO_YIELD &rArr; mipc_poll &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_yield
</UL>

<P><STRONG><a name="[17c]"></a>MX_WIFI_Init</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, mx_wifi.o(.text.MX_WIFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_WIFI_Init &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
</UL>

<P><STRONG><a name="[1d9]"></a>MX_WIFI_RegisterBusIO</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mx_wifi.o(.text.MX_WIFI_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_WIFI_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxwifi_probe
</UL>

<P><STRONG><a name="[1d5]"></a>MX_WIFI_RegisterStatusCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mx_wifi.o(.text.MX_WIFI_RegisterStatusCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_start
</UL>

<P><STRONG><a name="[c2]"></a>MX_WIFI_SPI_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, net_conf_mxchip_spi.o(.text.MX_WIFI_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_WIFI_SPI_Init &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_conf_mxchip_spi.o(.text.mxwifi_probe)
</UL>
<P><STRONG><a name="[c1]"></a>MX_WIFI_SPI_Write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, net_conf_mxchip_spi.o(.text.MX_WIFI_SPI_Write))
<BR>[Address Reference Count : 1]<UL><LI> net_conf_mxchip_spi.o(.text.mxwifi_probe)
</UL>
<P><STRONG><a name="[17e]"></a>MX_WIFI_Scan</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, mx_wifi.o(.text.MX_WIFI_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MX_WIFI_Scan &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_scan
</UL>

<P><STRONG><a name="[17f]"></a>MX_WIFI_Socket_accept</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, mx_wifi.o(.text.MX_WIFI_Socket_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_WIFI_Socket_accept &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_accept
</UL>

<P><STRONG><a name="[180]"></a>MX_WIFI_Socket_bind</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, mx_wifi.o(.text.MX_WIFI_Socket_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_WIFI_Socket_bind &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_bind
</UL>

<P><STRONG><a name="[181]"></a>MX_WIFI_Socket_close</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, mx_wifi.o(.text.MX_WIFI_Socket_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_WIFI_Socket_close &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_close
</UL>

<P><STRONG><a name="[182]"></a>MX_WIFI_Socket_connect</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, mx_wifi.o(.text.MX_WIFI_Socket_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_WIFI_Socket_connect &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_connect
</UL>

<P><STRONG><a name="[183]"></a>MX_WIFI_Socket_create</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, mx_wifi.o(.text.MX_WIFI_Socket_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_WIFI_Socket_create &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_socket
</UL>

<P><STRONG><a name="[184]"></a>MX_WIFI_Socket_gethostbyname</STRONG> (Thumb, 152 bytes, Stack size 304 bytes, mx_wifi.o(.text.MX_WIFI_Socket_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = MX_WIFI_Socket_gethostbyname &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_gethostbyname
</UL>

<P><STRONG><a name="[185]"></a>MX_WIFI_Socket_getpeername</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, mx_wifi.o(.text.MX_WIFI_Socket_getpeername))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_WIFI_Socket_getpeername &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_getpeername
</UL>

<P><STRONG><a name="[186]"></a>MX_WIFI_Socket_getsockname</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, mx_wifi.o(.text.MX_WIFI_Socket_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_WIFI_Socket_getsockname &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_getsockname
</UL>

<P><STRONG><a name="[187]"></a>MX_WIFI_Socket_getsockopt</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, mx_wifi.o(.text.MX_WIFI_Socket_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MX_WIFI_Socket_getsockopt &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_getsockopt
</UL>

<P><STRONG><a name="[188]"></a>MX_WIFI_Socket_listen</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mx_wifi.o(.text.MX_WIFI_Socket_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_WIFI_Socket_listen &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_listen
</UL>

<P><STRONG><a name="[189]"></a>MX_WIFI_Socket_ping</STRONG> (Thumb, 176 bytes, Stack size 344 bytes, mx_wifi.o(.text.MX_WIFI_Socket_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = MX_WIFI_Socket_ping &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_ping
</UL>

<P><STRONG><a name="[18c]"></a>MX_WIFI_Socket_recv</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, mx_wifi.o(.text.MX_WIFI_Socket_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_WIFI_Socket_recv &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_recv
</UL>

<P><STRONG><a name="[18e]"></a>MX_WIFI_Socket_recvfrom</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, mx_wifi.o(.text.MX_WIFI_Socket_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_WIFI_Socket_recvfrom &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_recvfrom
</UL>

<P><STRONG><a name="[18f]"></a>MX_WIFI_Socket_send</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, mx_wifi.o(.text.MX_WIFI_Socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_WIFI_Socket_send &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_send
</UL>

<P><STRONG><a name="[190]"></a>MX_WIFI_Socket_sendto</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, mx_wifi.o(.text.MX_WIFI_Socket_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_WIFI_Socket_sendto &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_sendto
</UL>

<P><STRONG><a name="[191]"></a>MX_WIFI_Socket_setsockopt</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, mx_wifi.o(.text.MX_WIFI_Socket_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_WIFI_Socket_setsockopt &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_setsockopt
</UL>

<P><STRONG><a name="[192]"></a>MX_WIFI_Socket_shutdown</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mx_wifi.o(.text.MX_WIFI_Socket_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_WIFI_Socket_shutdown &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_shutdown
</UL>

<P><STRONG><a name="[193]"></a>MX_WIFI_StartAP</STRONG> (Thumb, 122 bytes, Stack size 200 bytes, mx_wifi.o(.text.MX_WIFI_StartAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MX_WIFI_StartAP &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_start
</UL>

<P><STRONG><a name="[194]"></a>MX_WIFI_StopAP</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mx_wifi.o(.text.MX_WIFI_StopAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_WIFI_StopAP &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_stop
</UL>

<P><STRONG><a name="[1d6]"></a>MX_WIFI_WPS_Connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mx_wifi.o(.text.MX_WIFI_WPS_Connect))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_start
</UL>

<P><STRONG><a name="[1d7]"></a>MX_WIFI_WPS_Stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mx_wifi.o(.text.MX_WIFI_WPS_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_stop
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>NetInterfaceConnect</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, net_interface.o(.text.NetInterfaceConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NetInterfaceConnect &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_set_ipaddr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_set_dhcp_server_mode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_connect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_set_dhcp_mode
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_set_credentials
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_set_ap_max_connections
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_set_access_channel
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_set_access_mode
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_set_credentials
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_start
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_wait_state
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_get_class
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_connect
</UL>

<P><STRONG><a name="[1a3]"></a>NetInterfaceOn</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, net_interface.o(.text.NetInterfaceOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NetInterfaceOn &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_wait_state
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_connect
</UL>

<P><STRONG><a name="[1a6]"></a>NetWifiGetDefaultStation</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, net_interface.o(.text.NetWifiGetDefaultStation))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = NetWifiGetDefaultStation &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_security_to_string
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_get_scan_results
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_scan
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_connect
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI2_IRQHandler &rArr; HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.SecureFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, system_stm32u5xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32u5xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[14b]"></a>UART_SetConfig</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, stm32u5xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[14d]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, stm32u5xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>app_entry</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, webserver_main.o(.text.app_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = app_entry &rArr; webserver_http_start &rArr; http_send_response &rArr; webserver_http_encode_image_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_sensors_start
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_connect
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_process_error
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_print_header
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>bsp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp.o(.text.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_init &rArr; BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, console.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[158]"></a>hts221_block_data_update_set</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_block_data_update_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[156]"></a>hts221_data_rate_get</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetOutputDataRate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetOutputDataRate
</UL>

<P><STRONG><a name="[157]"></a>hts221_data_rate_set</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_SetOutputDataRate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_SetOutputDataRate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[159]"></a>hts221_device_id_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hts221_reg.o(.text.hts221_device_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadID
</UL>

<P><STRONG><a name="[151]"></a>hts221_hum_adc_point_0_get</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_hum_adc_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_hum_adc_point_0_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[153]"></a>hts221_hum_adc_point_1_get</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_hum_adc_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_hum_adc_point_1_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[152]"></a>hts221_hum_rh_point_0_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_hum_rh_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_hum_rh_point_0_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[154]"></a>hts221_hum_rh_point_1_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_hum_rh_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_hum_rh_point_1_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[155]"></a>hts221_humidity_raw_get</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_humidity_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_humidity_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[150]"></a>hts221_power_on_set</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_power_on_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_power_on_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_Disable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_Enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_Disable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_Enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[15a]"></a>hts221_temp_adc_point_0_get</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temp_adc_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temp_adc_point_0_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[15c]"></a>hts221_temp_adc_point_1_get</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temp_adc_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temp_adc_point_1_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[15b]"></a>hts221_temp_deg_point_0_get</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temp_deg_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temp_deg_point_0_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[15d]"></a>hts221_temp_deg_point_1_get</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temp_deg_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temp_deg_point_1_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[15e]"></a>hts221_temperature_raw_get</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temperature_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temperature_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[1bf]"></a>instruction_cache_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_config.o(.text.instruction_cache_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = instruction_cache_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_ConfigAssociativityMode
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>lps22hh_auto_increment_set</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_auto_increment_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hh_auto_increment_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[164]"></a>lps22hh_block_data_update_set</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hh_block_data_update_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[160]"></a>lps22hh_data_rate_get</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hh_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_SetOutputDataRate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_GetOutputDataRate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_Disable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_SetOutputDataRate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_GetOutputDataRate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_Disable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_DeInit
</UL>

<P><STRONG><a name="[161]"></a>lps22hh_data_rate_set</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hh_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_SetOutputDataRate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_Disable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_SetOutputDataRate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_Disable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_Enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_DeInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[168]"></a>lps22hh_device_id_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.lps22hh_device_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_ReadID
</UL>

<P><STRONG><a name="[16b]"></a>lps22hh_from_lsb_to_celsius</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.lps22hh_from_lsb_to_celsius))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[167]"></a>lps22hh_from_lsb_to_hpa</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.lps22hh_from_lsb_to_hpa))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_GetPressure
</UL>

<P><STRONG><a name="[162]"></a>lps22hh_i3c_interface_set</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_i3c_interface_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hh_i3c_interface_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[163]"></a>lps22hh_lp_bandwidth_set</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_lp_bandwidth_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hh_lp_bandwidth_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[166]"></a>lps22hh_pressure_raw_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_pressure_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hh_pressure_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_GetPressure
</UL>

<P><STRONG><a name="[16a]"></a>lps22hh_temperature_raw_get</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_temperature_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hh_temperature_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[169]"></a>lps22hh_write_reg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hh_reg.o(.text.lps22hh_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lps22hh_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_RegisterBusIO
</UL>

<P><STRONG><a name="[88]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = main &rArr; app_entry &rArr; webserver_http_start &rArr; http_send_response &rArr; webserver_http_encode_image_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instruction_cache_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e7]"></a>mapi_reboot_event_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mx_wifi_ipc.o(.text.mapi_reboot_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mapi_reboot_event_callback &rArr; mx_wifi_hci_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mx_wifi_ipc.o(.data.event_table)
</UL>
<P><STRONG><a name="[e9]"></a>mapi_wifi_netlink_input_callback</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mx_wifi_ipc.o(.text.mapi_wifi_netlink_input_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mapi_wifi_netlink_input_callback &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mx_wifi_ipc.o(.data.event_table)
</UL>
<P><STRONG><a name="[e8]"></a>mapi_wifi_status_event_callback</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mx_wifi_ipc.o(.text.mapi_wifi_status_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mapi_wifi_status_event_callback &rArr; mx_wifi_hci_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mx_wifi_ipc.o(.data.event_table)
</UL>
<P><STRONG><a name="[175]"></a>mipc_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mx_wifi_ipc.o(.text.mipc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mipc_deinit &rArr; mx_wifi_hci_deinit &rArr; noos_fifo_deinit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_DeInit
</UL>

<P><STRONG><a name="[17d]"></a>mipc_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mx_wifi_ipc.o(.text.mipc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mipc_init &rArr; mx_wifi_hci_init &rArr; noos_fifo_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Init
</UL>

<P><STRONG><a name="[a4]"></a>mipc_poll</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, mx_wifi_ipc.o(.text.mipc_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mipc_poll &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_recv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_IO_YIELD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mx_wifi_ipc.o(.text.mipc_request)
</UL>
<P><STRONG><a name="[173]"></a>mipc_request</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, mx_wifi_ipc.o(.text.mipc_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_sem_wait
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_send
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_getsockname
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_getpeername
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_ping
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_gethostbyname
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recvfrom
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recv
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_sendto
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_close
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_shutdown
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_connect
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_accept
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_listen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_bind
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_getsockopt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_setsockopt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_create
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_StopAP
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_StartAP
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_GetIPAddress
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Disconnect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Connect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Scan
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Init
</UL>

<P><STRONG><a name="[c7]"></a>mx_wifi_driver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mx_wifi.o(.text.mx_wifi_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mx_wifi_driver &rArr; mx_wifi_if_init &rArr; MX_WIFI_Init &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver_wifi.o(.text.webserver_wifi_connect)
</UL>
<P><STRONG><a name="[1c5]"></a>mx_wifi_hci_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mx_wifi_hci.o(.text.mx_wifi_hci_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mx_wifi_hci_deinit &rArr; noos_fifo_deinit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_fifo_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_deinit
</UL>

<P><STRONG><a name="[1c3]"></a>mx_wifi_hci_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mx_wifi_hci.o(.text.mx_wifi_hci_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mx_wifi_hci_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapi_wifi_status_event_callback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapi_reboot_event_callback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_poll
</UL>

<P><STRONG><a name="[1c6]"></a>mx_wifi_hci_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mx_wifi_hci.o(.text.mx_wifi_hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mx_wifi_hci_init &rArr; noos_fifo_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_init
</UL>

<P><STRONG><a name="[1cc]"></a>mx_wifi_hci_input</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mx_wifi_hci.o(.text.mx_wifi_hci_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mx_wifi_hci_input &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_fifo_push
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
</UL>

<P><STRONG><a name="[1c7]"></a>mx_wifi_hci_recv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mx_wifi_hci.o(.text.mx_wifi_hci_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mx_wifi_hci_recv &rArr; noos_fifo_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_fifo_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_poll
</UL>

<P><STRONG><a name="[1c8]"></a>mx_wifi_hci_send</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mx_wifi_hci.o(.text.mx_wifi_hci_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mx_wifi_hci_send &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>

<P><STRONG><a name="[119]"></a>mxchip_WIFI_ISR</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, net_conf_mxchip_spi.o(.text.mxchip_WIFI_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Rising_Callback
</UL>

<P><STRONG><a name="[1d0]"></a>mxwifi_probe</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, net_conf_mxchip_spi.o(.text.mxwifi_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mxwifi_probe &rArr; MX_WIFI_RegisterBusIO
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
</UL>

<P><STRONG><a name="[1da]"></a>net_accept</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, net_socket.o(.text.net_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_accept &rArr; net_if_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[1dc]"></a>net_bind</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, net_socket.o(.text.net_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_bind &rArr; net_if_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[19c]"></a>net_cellular_set_credentials</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, net_class_extension.o(.text.net_cellular_set_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_cellular_set_credentials
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[1f9]"></a>net_closesocket</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, net_socket.o(.text.net_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[1de]"></a>net_get_ip_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_address.o(.text.net_get_ip_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_find
</UL>

<P><STRONG><a name="[19f]"></a>net_if_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_core.o(.text.net_if_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_if_connect &rArr; net_state_manage_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_state_manage_event
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[1db]"></a>net_if_find</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, net_core.o(.text.net_if_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_if_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ip_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_accept
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bind
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket
</UL>

<P><STRONG><a name="[1d8]"></a>net_if_getState</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net_core.o(.text.net_if_getState))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_status_changed
</UL>

<P><STRONG><a name="[1a5]"></a>net_if_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, net_core.o(.text.net_if_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_if_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceOn
</UL>

<P><STRONG><a name="[1e1]"></a>net_if_notify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_core.o(.text.net_if_notify))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_state_manage_event
</UL>

<P><STRONG><a name="[19e]"></a>net_if_set_dhcp_mode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_core.o(.text.net_if_set_dhcp_mode))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[1a0]"></a>net_if_set_dhcp_server_mode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_core.o(.text.net_if_set_dhcp_server_mode))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[1a1]"></a>net_if_set_ipaddr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_core.o(.text.net_if_set_ipaddr))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[197]"></a>net_if_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_core.o(.text.net_if_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_if_start &rArr; net_state_manage_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_state_manage_event
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[19d]"></a>net_if_wait_state</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, net_core.o(.text.net_if_wait_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_if_wait_state
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceOn
</UL>

<P><STRONG><a name="[1f2]"></a>net_listen</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, net_socket.o(.text.net_listen))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[1b4]"></a>net_ntoa</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_address.o(.text.net_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ntoa &rArr; net_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hnet_notify
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_ping
</UL>

<P><STRONG><a name="[1df]"></a>net_ntoa_r</STRONG> (Thumb, 770 bytes, Stack size 24 bytes, net_address.o(.text.net_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ntoa
</UL>

<P><STRONG><a name="[1f3]"></a>net_recvfrom</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, net_socket.o(.text.net_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[1be]"></a>net_send</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, net_socket.o(.text.net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
</UL>

<P><STRONG><a name="[1f1]"></a>net_set_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_address.o(.text.net_set_port))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[1e0]"></a>net_socket</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, net_socket.o(.text.net_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_socket &rArr; net_if_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[1cf]"></a>net_state_manage_event</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, net_state.o(.text.net_state_manage_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_state_manage_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_notify
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_connect
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_status_changed
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_disconnect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_connect
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_stop
</UL>

<P><STRONG><a name="[196]"></a>net_wifi_get_class</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_class_extension.o(.text.net_wifi_get_class))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_connect
</UL>

<P><STRONG><a name="[1a8]"></a>net_wifi_get_scan_results</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, net_class_extension.o(.text.net_wifi_get_scan_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_wifi_get_scan_results
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWifiGetDefaultStation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_cmd
</UL>

<P><STRONG><a name="[1a7]"></a>net_wifi_scan</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, net_class_extension.o(.text.net_wifi_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_wifi_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWifiGetDefaultStation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_cmd
</UL>

<P><STRONG><a name="[1aa]"></a>net_wifi_security_to_string</STRONG> (Thumb, 440 bytes, Stack size 0 bytes, net_class_extension.o(.text.net_wifi_security_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWifiGetDefaultStation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_cmd
</UL>

<P><STRONG><a name="[19a]"></a>net_wifi_set_access_channel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_class_extension.o(.text.net_wifi_set_access_channel))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[199]"></a>net_wifi_set_access_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_class_extension.o(.text.net_wifi_set_access_mode))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[19b]"></a>net_wifi_set_ap_max_connections</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_class_extension.o(.text.net_wifi_set_ap_max_connections))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[198]"></a>net_wifi_set_credentials</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_class_extension.o(.text.net_wifi_set_credentials))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
</UL>

<P><STRONG><a name="[1dd]"></a>netif_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_core.o(.text.netif_check))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_cellular_set_credentials
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_get_scan_results
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_scan
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_state_manage_event
</UL>

<P><STRONG><a name="[1ca]"></a>noos_fifo_deinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mx_rtos_abs.o(.text.noos_fifo_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = noos_fifo_deinit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_deinit
</UL>

<P><STRONG><a name="[1cb]"></a>noos_fifo_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mx_rtos_abs.o(.text.noos_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = noos_fifo_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_init
</UL>

<P><STRONG><a name="[1ce]"></a>noos_fifo_pop</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mx_rtos_abs.o(.text.noos_fifo_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = noos_fifo_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_recv
</UL>

<P><STRONG><a name="[1cd]"></a>noos_fifo_push</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, mx_rtos_abs.o(.text.noos_fifo_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = noos_fifo_push
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_input
</UL>

<P><STRONG><a name="[1c9]"></a>noos_sem_wait</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mx_rtos_abs.o(.text.noos_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = noos_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_flow_high
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
</UL>

<P><STRONG><a name="[a5]"></a>process_txrx_poll</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, net_conf_mxchip_spi.o(.text.process_txrx_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = process_txrx_poll &rArr; mx_wifi_hci_input &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_input
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_sem_wait
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_flow_high
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mx_wifi_hci.o(.text.mx_wifi_hci_recv)
</UL>
<P><STRONG><a name="[1e4]"></a>scan_cmd</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, net_interface.o(.text.scan_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = scan_cmd &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_security_to_string
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_get_scan_results
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_scan
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_connect
</UL>

<P><STRONG><a name="[1c2]"></a>system_clock_config</STRONG> (Thumb, 174 bytes, Stack size 136 bytes, system_config.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = system_clock_config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>system_init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, system_config.o(.text.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = system_init &rArr; webserver_console_config &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_PWM_Start_IT
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_OC_ConfigChannel
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_RegisterCallback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1e7]"></a>webserver_console_config</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, console.o(.text.webserver_console_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = webserver_console_config &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1ed]"></a>webserver_console_get_password</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, console.o(.text.webserver_console_get_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = webserver_console_get_password &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_connect
</UL>

<P><STRONG><a name="[1ef]"></a>webserver_console_get_ssid</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, console.o(.text.webserver_console_get_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = webserver_console_get_ssid &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_wifi_connect
</UL>

<P><STRONG><a name="[1af]"></a>webserver_console_print_header</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, console.o(.text.webserver_console_print_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = webserver_console_print_header &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1b8]"></a>webserver_http_encode_css_response</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, webserver_http_encoder.o(.text.webserver_http_encode_css_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = webserver_http_encode_css_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
</UL>

<P><STRONG><a name="[1b9]"></a>webserver_http_encode_favicon_response</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, webserver_http_encoder.o(.text.webserver_http_encode_favicon_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = webserver_http_encode_favicon_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
</UL>

<P><STRONG><a name="[1b6]"></a>webserver_http_encode_html_response</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, webserver_http_encoder.o(.text.webserver_http_encode_html_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = webserver_http_encode_html_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
</UL>

<P><STRONG><a name="[1bd]"></a>webserver_http_encode_image_response</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, webserver_http_encoder.o(.text.webserver_http_encode_image_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = webserver_http_encode_image_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
</UL>

<P><STRONG><a name="[1b7]"></a>webserver_http_encode_js_response</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, webserver_http_encoder.o(.text.webserver_http_encode_js_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = webserver_http_encode_js_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
</UL>

<P><STRONG><a name="[1bc]"></a>webserver_http_encode_json_response</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, webserver_http_encoder.o(.text.webserver_http_encode_json_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = webserver_http_encode_json_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
</UL>

<P><STRONG><a name="[1ba]"></a>webserver_http_encode_sensor_response</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, webserver_http_encoder.o(.text.webserver_http_encode_sensor_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = webserver_http_encode_sensor_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
</UL>

<P><STRONG><a name="[1bb]"></a>webserver_http_encode_woff2_response</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, webserver_http_encoder.o(.text.webserver_http_encode_woff2_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = webserver_http_encode_woff2_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
</UL>

<P><STRONG><a name="[1b2]"></a>webserver_http_start</STRONG> (Thumb, 1140 bytes, Stack size 1632 bytes, webserver_http_response.o(.text.webserver_http_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = webserver_http_start &rArr; http_send_response &rArr; webserver_http_encode_image_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_closesocket
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_press_sensor_read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_temp_sensor_read
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_humid_sensor_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recvfrom
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_accept
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_listen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bind
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_port
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_socket
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_response
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1f5]"></a>webserver_humid_sensor_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, webserver_sensors.o(.text.webserver_humid_sensor_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = webserver_humid_sensor_read &rArr; BSP_ENV_SENSOR_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[1f8]"></a>webserver_press_sensor_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, webserver_sensors.o(.text.webserver_press_sensor_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = webserver_press_sensor_read &rArr; BSP_ENV_SENSOR_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[129]"></a>webserver_process_error</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, webserver_status.o(.text.webserver_process_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = webserver_process_error &rArr; BSP_LED_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1b1]"></a>webserver_sensors_start</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, webserver_sensors.o(.text.webserver_sensors_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = webserver_sensors_start &rArr; BSP_ENV_SENSOR_Init &rArr; LPS22HH_RegisterBusIO &rArr; lps22hh_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_GetOutputDataRate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_SetOutputDataRate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_Enable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1f6]"></a>webserver_temp_sensor_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, webserver_sensors.o(.text.webserver_temp_sensor_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = webserver_temp_sensor_read &rArr; BSP_ENV_SENSOR_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENV_SENSOR_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[1b0]"></a>webserver_wifi_connect</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, webserver_wifi.o(.text.webserver_wifi_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = webserver_wifi_connect &rArr; NetWifiGetDefaultStation &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWifiGetDefaultStation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_cmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_wifi_get_class
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceOn
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_password
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1ae]"></a>webserver_wifi_init</STRONG> (Thumb, 406 bytes, Stack size 64 bytes, webserver_wifi.o(.text.webserver_wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = webserver_wifi_init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; webserver_process_error &rArr; BSP_LED_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_entry
</UL>

<P><STRONG><a name="[1c4]"></a>wifi_obj_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_conf_mxchip_spi.o(.text.wifi_obj_get))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapi_wifi_netlink_input_callback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapi_wifi_status_event_callback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_status_changed
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_get_scan_result
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_scan
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_ping
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_gethostbyname
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_shutdown
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_getpeername
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_getsockname
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_getsockopt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_setsockopt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_recvfrom
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_sendto
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_recv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_send
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_connect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_accept
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_listen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_bind
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_socket
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_connect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_yield
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_deinit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
</UL>

<P><STRONG><a name="[1ff]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[216]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWifiGetDefaultStation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_cmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceOn
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hnet_notify
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_poll
</UL>

<P><STRONG><a name="[217]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[218]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[201]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[219]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_image_response
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_json_response
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_woff2_response
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_sensor_response
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_favicon_response
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_js_response
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_css_response
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_html_response
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_start
</UL>

<P><STRONG><a name="[21a]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[21b]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[21c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[21d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[21e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[18d]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_input
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapi_wifi_netlink_input_callback
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_free
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_fifo_deinit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_fifo_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recvfrom
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recv
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_sendto
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_poll
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_get_scan_result
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_deinit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
</UL>

<P><STRONG><a name="[f3]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceOn
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_fifo_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recvfrom
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recv
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_sendto
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_if_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[1ee]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(i.putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = putchar &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_password
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_ssid
</UL>

<P><STRONG><a name="[1a2]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_hci_input
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_flow_high
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceConnect
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWifiGetDefaultStation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_cmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInterfaceOn
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hnet_notify
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_password
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_get_ssid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_console_print_header
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_request
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mipc_poll
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c6]"></a>LPTIM_UpdateEventCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_config.o(.text.LPTIM_UpdateEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIM_UpdateEventCallback &rArr; BSP_LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_config.o(.text.system_init)
</UL>
<P><STRONG><a name="[1b5]"></a>http_send_response</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, webserver_http_response.o(.text.http_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = http_send_response &rArr; webserver_http_encode_image_response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_image_response
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_json_response
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_woff2_response
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_sensor_response
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_favicon_response
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_js_response
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_css_response
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_encode_html_response
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webserver_http_start
</UL>

<P><STRONG><a name="[c8]"></a>hnet_notify</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, webserver_wifi.o(.text.hnet_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hnet_notify &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ntoa
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver_wifi.o(.text.webserver_wifi_connect)
</UL>
<P><STRONG><a name="[1e3]"></a>wait_flow_high</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, net_conf_mxchip_spi.o(.text.wait_flow_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wait_flow_high &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_sem_wait
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_txrx_poll
</UL>

<P><STRONG><a name="[c3]"></a>MX_WIFI_SPI_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_conf_mxchip_spi.o(.text.MX_WIFI_SPI_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> net_conf_mxchip_spi.o(.text.mxwifi_probe)
</UL>
<P><STRONG><a name="[c4]"></a>MX_WIFI_IO_DELAY</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_conf_mxchip_spi.o(.text.MX_WIFI_IO_DELAY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_WIFI_IO_DELAY &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_conf_mxchip_spi.o(.text.mxwifi_probe)
</UL>
<P><STRONG><a name="[c5]"></a>MX_WIFI_SPI_Read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_conf_mxchip_spi.o(.text.MX_WIFI_SPI_Read))
<BR>[Address Reference Count : 1]<UL><LI> net_conf_mxchip_spi.o(.text.mxwifi_probe)
</UL>
<P><STRONG><a name="[107]"></a>I2C_GetTiming</STRONG> (Thumb, 812 bytes, Stack size 64 bytes, b_u585i_iot02a_bus.o(.text.I2C_GetTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_GetTiming
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C2_Init
</UL>

<P><STRONG><a name="[a0]"></a>ReadRegWrap</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hts221.o(.text.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.text.HTS221_RegisterBusIO)
</UL>
<P><STRONG><a name="[a1]"></a>WriteRegWrap</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hts221.o(.text.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.text.HTS221_RegisterBusIO)
</UL>
<P><STRONG><a name="[a2]"></a>ReadRegWrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hh.o(.text.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.text.LPS22HH_RegisterBusIO)
</UL>
<P><STRONG><a name="[a3]"></a>WriteRegWrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hh.o(.text.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.text.LPS22HH_RegisterBusIO)
</UL>
<P><STRONG><a name="[172]"></a>mx_ntoa</STRONG> (Thumb, 588 bytes, Stack size 32 bytes, mx_wifi.o(.text.mx_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mx_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Connect
</UL>

<P><STRONG><a name="[178]"></a>mx_aton_r</STRONG> (Thumb, 1166 bytes, Stack size 24 bytes, mx_wifi.o(.text.mx_aton_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mx_aton_r
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_GetIPAddress
</UL>

<P><STRONG><a name="[120]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32u5xx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[15f]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32u5xx_hal_i2c.o(.text.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>

<P><STRONG><a name="[11e]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32u5xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[11f]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32u5xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[11d]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, stm32u5xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[135]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32u5xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[136]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32u5xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[13b]"></a>SPI_CloseTransfer</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, stm32u5xx_hal_spi.o(.text.SPI_CloseTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32u5xx_hal_spi.o(.text.SPI_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32u5xx_hal_spi.o(.text.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[a6]"></a>mx_wifi_if_init</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, net_mx_wifi.o(.text.mx_wifi_if_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mx_wifi_if_init &rArr; MX_WIFI_Init &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxwifi_probe
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_GetMACAddress
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_HardResetModule
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_wifi_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[a7]"></a>mx_wifi_if_deinit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_mx_wifi.o(.text.mx_wifi_if_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mx_wifi_if_deinit &rArr; MX_WIFI_DeInit &rArr; mipc_deinit &rArr; mx_wifi_hci_deinit &rArr; noos_fifo_deinit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_DeInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[a8]"></a>mx_wifi_if_start</STRONG> (Thumb, 346 bytes, Stack size 200 bytes, net_mx_wifi.o(.text.mx_wifi_if_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mx_wifi_if_start &rArr; MX_WIFI_Connect &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_StartAP
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_WPS_Connect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Connect
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_RegisterStatusCallback
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[a9]"></a>mx_wifi_if_stop</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, net_mx_wifi.o(.text.mx_wifi_if_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mx_wifi_if_stop &rArr; MX_WIFI_StopAP &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_StopAP
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_WPS_Stop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Disconnect
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_state_manage_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[aa]"></a>mx_wifi_if_yield</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net_mx_wifi.o(.text.mx_wifi_if_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mx_wifi_if_yield &rArr; MX_WIFI_IO_YIELD &rArr; mipc_poll &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_IO_YIELD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[ab]"></a>mx_wifi_if_connect</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, net_mx_wifi.o(.text.mx_wifi_if_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mx_wifi_if_connect &rArr; MX_WIFI_GetIPAddress &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_GetIPAddress
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_state_manage_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[ac]"></a>mx_wifi_if_disconnect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_mx_wifi.o(.text.mx_wifi_if_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mx_wifi_if_disconnect &rArr; net_state_manage_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_state_manage_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[ad]"></a>mx_wifi_socket</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, net_mx_wifi.o(.text.mx_wifi_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mx_wifi_socket &rArr; MX_WIFI_Socket_create &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[ae]"></a>mx_wifi_bind</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, net_mx_wifi.o(.text.mx_wifi_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mx_wifi_bind &rArr; MX_WIFI_Socket_bind &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[af]"></a>mx_wifi_listen</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, net_mx_wifi.o(.text.mx_wifi_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mx_wifi_listen &rArr; MX_WIFI_Socket_listen &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_listen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b0]"></a>mx_wifi_accept</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, net_mx_wifi.o(.text.mx_wifi_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mx_wifi_accept &rArr; MX_WIFI_Socket_accept &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_accept
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b1]"></a>mx_wifi_connect</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, net_mx_wifi.o(.text.mx_wifi_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mx_wifi_connect &rArr; MX_WIFI_Socket_connect &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b2]"></a>mx_wifi_send</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_mx_wifi.o(.text.mx_wifi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mx_wifi_send &rArr; MX_WIFI_Socket_send &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b3]"></a>mx_wifi_recv</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, net_mx_wifi.o(.text.mx_wifi_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mx_wifi_recv &rArr; MX_WIFI_Socket_recv &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b4]"></a>mx_wifi_sendto</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, net_mx_wifi.o(.text.mx_wifi_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mx_wifi_sendto &rArr; MX_WIFI_Socket_sendto &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b5]"></a>mx_wifi_recvfrom</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, net_mx_wifi.o(.text.mx_wifi_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mx_wifi_recvfrom &rArr; MX_WIFI_Socket_recvfrom &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b6]"></a>mx_wifi_setsockopt</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, net_mx_wifi.o(.text.mx_wifi_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mx_wifi_setsockopt &rArr; MX_WIFI_Socket_setsockopt &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_setsockopt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b7]"></a>mx_wifi_getsockopt</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, net_mx_wifi.o(.text.mx_wifi_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mx_wifi_getsockopt &rArr; MX_WIFI_Socket_getsockopt &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_getsockopt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b8]"></a>mx_wifi_getsockname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, net_mx_wifi.o(.text.mx_wifi_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mx_wifi_getsockname &rArr; MX_WIFI_Socket_getsockname &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_getsockname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[b9]"></a>mx_wifi_getpeername</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, net_mx_wifi.o(.text.mx_wifi_getpeername))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mx_wifi_getpeername &rArr; MX_WIFI_Socket_getpeername &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_getpeername
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[ba]"></a>mx_wifi_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net_mx_wifi.o(.text.mx_wifi_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mx_wifi_close &rArr; MX_WIFI_Socket_close &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[bb]"></a>mx_wifi_shutdown</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, net_mx_wifi.o(.text.mx_wifi_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mx_wifi_shutdown &rArr; MX_WIFI_Socket_shutdown &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[bc]"></a>mx_wifi_gethostbyname</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, net_mx_wifi.o(.text.mx_wifi_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mx_wifi_gethostbyname &rArr; MX_WIFI_Socket_gethostbyname &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_gethostbyname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[bd]"></a>mx_wifi_ping</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, net_mx_wifi.o(.text.mx_wifi_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mx_wifi_ping &rArr; MX_WIFI_Socket_ping &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ntoa
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Socket_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[be]"></a>mx_wifi_scan</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net_mx_wifi.o(.text.mx_wifi_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mx_wifi_scan &rArr; MX_WIFI_Scan &rArr; mipc_request &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Scan
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[bf]"></a>mx_wifi_get_scan_result</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, net_mx_wifi.o(.text.mx_wifi_get_scan_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mx_wifi_get_scan_result &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_WIFI_Get_scan_result
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_init)
</UL>
<P><STRONG><a name="[c0]"></a>mx_wifi_status_changed</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, net_mx_wifi.o(.text.mx_wifi_status_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mx_wifi_status_changed &rArr; net_state_manage_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_obj_get
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_getState
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_state_manage_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_mx_wifi.o(.text.mx_wifi_if_start)
</UL>
<P><STRONG><a name="[202]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[200]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[205]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[204]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ca]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
